#!/usr/bin/env node
const path = require('path')
const fs = require('fs-extra')
const program = require('commander')
const chalk = require('chalk')
const { shouldUseCnpm } = require('../dist/util')
const ora = require('ora')
const exec = require('child_process').exec
const getLatestVersion = require('latest-version')
const { UPDATE_PACKAGE_LIST, PRIVATE_NPM } = require('../dist/util/constants')
const pkgPath = path.join(process.cwd(), 'package.json')
const Install = require('../dist/add/index').default

program.parse(process.argv)

const args = program.args

if (args.length === 1) {
  switch (args[0]) {
    case 'self': {
      updateSelf()
      break
    }
    case 'project': {
      updateProject()
      break
    }
    default:
      info()
  }
} else {
  info()
}

function info () {
  console.log(chalk.red('命令错误:'))
  console.log(`${chalk.green('spaas update self')} 更新 SPaaS 开发工具 spaas-cli 到最新版本`)
  console.log(`${chalk.green('spaas update project')} 更新项目所有 SPaaS 相关依赖到最新版本...`)
}

function updateSelf () {
  let command
  if (shouldUseCnpm()) {
    command = `cnpm i -g @spaas/cli@latest --registry=${PRIVATE_NPM}`
  } else {
    command = `npm i -g @spaas/cli@latest --registry=${PRIVATE_NPM}`
  }

  const child = exec(command)

  const spinner = ora('即将将 SPaaS 开发工具 spaas-cli 更新到最新版本...').start()

  child.stdout.on('data', function (data) {
    console.log(data)
    spinner.stop()
  })
  child.stderr.on('data', function (data) {
    console.log(data)
    spinner.stop()
  })
}

async function updateProject () {
  if (!fs.existsSync(pkgPath)) {
    console.log(chalk.red('找不到Package.json，请确定当前目录是项目根目录!'))
    process.exit(1)
  }
  const packageMap = require(pkgPath)

  // 更新 @spaas/* 版本
  const dependenciesKeys = Object.keys(packageMap.dependencies)
  for (const key of dependenciesKeys) {
    if (UPDATE_PACKAGE_LIST.indexOf(key) !== -1) {
      packageMap.dependencies[key] = await getLatestVersion(key, {
        registryUrl: PRIVATE_NPM
      })
    }
  }

  const devDependencies = Object.keys(packageMap.devDependencies)

  for (const key of devDependencies) {
    if (UPDATE_PACKAGE_LIST.indexOf(key) !== -1) {
      packageMap.devDependencies[key] = await getLatestVersion(key, {
        registryUrl: PRIVATE_NPM
      })
    }
  }

  // 写入package.json
  try {
    await fs.writeJson(pkgPath, packageMap, {spaces: '\t'})
    console.log(chalk.green('更新项目 package.json 成功！'))
    console.log()
  } catch (err) {
    console.error(err)
  }
  const installPkg = new Install()
  installPkg.create(true)
}
